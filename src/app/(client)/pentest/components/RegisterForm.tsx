"use client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useCustomerContext } from "@/contexts/CustomerContext";
import PentestService from "@/services/PentestService";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import ModalNotSent from "./ModalNotSent";
import ModalSent from "./ModalSent";
import { toast } from "react-toastify";

const schema = z.object({
  name: z.string().min(3, "Nome é obrigatório").max(255, "Nome é muito longo"),
  email: z.string().email("Email é obrigatório"),
  objective: z
    .string()
    .min(1, "Objetivo é obrigatório")
    .max(700, "Objetivo é muito longo"),
  scope: z.string().min(1, "Escopo é obrigatório"),
  type: z.string().min(1, "Tipo é obrigatório"),
  requiresCredentials: z.string().min(1, "Campo obrigatório"),
});

type FormData = z.infer<typeof schema>;

const schema2 = z.object({
  specificCares: z
    .string()
    .min(3, "Preocuoações específicas é obrigatório")
    .max(700, "Preocuoações específicas é muito longo"),
  scopeRestriction: z
    .string()
    .min(3, "Exclusão e restrição de escopo é obrigatório")
    .max(700, "Exclusão e restrição de escopo é muito longo"),
  isVpn: z.string().min(1, "Pergunta obrigatória"),
  ativos: z.array(z.union([z.boolean(), z.string()])),
  environment: z.string().min(1, "Ambiente é obrigatório"),
  implementedControls: z
    .string()
    .min(1, "Controles Implementados é obrigatório"),
  others: z.string().optional(),
});

type FormData2 = z.infer<typeof schema2>;

const RegisterForm = () => {
  const [selectedCount, setSelectedCount] = useState(0);
  const { customers } = useCustomerContext();
  const [tab1, setTab1] = useState(true);
  const [loading, setLoading] = useState(false);
  const [form1, setForm1] = useState<FormData>();
  const [openSent, setOpenSent] = useState(false);
  const [loadingButtons, setLoadingButtons] = useState(false);
  const [openNotSent, setOpenNotSent] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(schema),
  });

  const {
    register: register2,
    watch,
    handleSubmit: handleSubmit2,
    formState: { errors: errors2 },
  } = useForm<FormData2>({
    resolver: zodResolver(schema2),
  });

  const onSubmit = (data: FormData) => {
    setForm1(data);
    setTab1(false);
  };

  const onSubmit2 = async (data: FormData2) => {
    try {
      setLoading(true);
      await PentestService.Post({
        customerId: customers?.id ?? 0,
        name: form1?.name ?? "",
        description: form1?.objective ?? "",
        scope: Number(form1?.scope),
        type: Number(form1?.type),
        needsCredential: form1?.requiresCredentials === "yes" ? true : false,
        targets: "",
        specificCares: data.specificCares,
        scopeRestriction: data.scopeRestriction,
        isVpn: data.isVpn === "true" ? true : false,
        environment: Number(data.environment),
        implementedControls: data.implementedControls,
        others: data.others,
      });
      setOpenSent(true);
      toast.success("Pentest enviado com sucesso");
    } catch (error) {
      console.log(error);
      setOpenNotSent(true);
    } finally {
      setLoading(false);
    }
  };

  const ativos = watch("ativos");
  useEffect(() => {
    setSelectedCount(
      ativos?.filter((x) => x.toString() === "true").length || 0
    );
  }, [ativos, loadingButtons]);

  return (
    <section className="flex flex-col gap-5 w-full max-w-[1200px]">
      <h3 className="font-bold md:text-2xl text-[#050506]">Cadastro</h3>
      <div className="p-3 bg-white w-full">
        <p className="hidden md:block text-black font-semibold text-sm mb-4">
          Informações de Cadastro
        </p>
        <div className="md:flex gap-8 mb-6 hidden">
          <div
            className={`${
              tab1 ? "text-[#3088EE]" : "text-[#B9B8BF]"
            } flex gap-2 items-center justify-center font-semibold`}
          >
            <p
              className={`flex items-center justify-center p-1 rounded-full border-[2px] w-10 h-10 ${
                tab1 ? "border-[#3088EE]" : "border-[#B9B8BF]"
              }`}
            >
              01
            </p>
            <p>Etapa</p>
          </div>
          <div
            className={`${
              !tab1 ? "text-[#3088EE]" : "text-[#B9B8BF]"
            } flex gap-2 items-center justify-center font-semibold`}
          >
            <p
              className={`flex items-center justify-center p-1 rounded-full border-[2px] w-10 h-10 ${
                !tab1 ? "border-[#3088EE]" : "border-[#B9B8BF]"
              }`}
            >
              02
            </p>
            <p>Etapa</p>
          </div>
        </div>
        <div className="flex md:hidden gap-2 w-full mb-6">
          <div
            className={`h-3 w-full rounded ${
              tab1 ? "bg-[#3088EE]" : "bg-[#E5E8ED]"
            }`}
          ></div>
          <div
            className={`h-3 w-full rounded ${
              !tab1 ? "bg-[#3088EE]" : "bg-[#E5E8ED]"
            }`}
          ></div>
        </div>
        {tab1 ? (
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="flex flex-col gap-4"
          >
            <div>
              <Label className="text-[#40414A] font-semibold text-sm">
                Nome<span className="text-red-500">*</span>
              </Label>
              <Input
                className="border-[#D8D9E0] border-[2px]"
                type="text"
                placeholder="Insira o nome do pentest"
                {...register("name")}
              />
              {errors.name && (
                <p className="text-red-500 text-sm">{errors.name.message}</p>
              )}
            </div>
            <div>
              <Label className="text-[#40414A] font-semibold text-sm">
                Email<span className="text-red-500">*</span>
              </Label>
              <Input
                className="border-[#D8D9E0] border-[2px]"
                type="text"
                placeholder="Insira o e-mail do solicitante"
                {...register("email")}
              />
              {errors.name && (
                <p className="text-red-500 text-sm">{errors.name.message}</p>
              )}
            </div>
            <div>
              <Label className="text-[#40414A] font-semibold text-sm">
                Objetivo<span className="text-red-500">*</span>
              </Label>
              <Textarea
                placeholder="Insira seu objetivo aqui"
                className="border-[#D8D9E0] border-[2px]"
                {...register("objective")}
              />
              {errors.objective && (
                <p className="text-red-500 text-sm">
                  {errors.objective.message}
                </p>
              )}
            </div>
            <div className="flex flex-col md:flex-row w-full gap-4">
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  Escopo<span className="text-red-500">*</span>
                </Label>
                <select
                  {...register("scope")}
                  className="w-full h-12 border rounded-lg border-[#E6E6E8] px-2"
                >
                  <option disabled value="">
                    Selecione escopo
                  </option>
                  <option value="1">Completo</option>
                  <option value="2">Feature</option>
                </select>
                {errors.scope && (
                  <p className="text-red-500 text-sm">{errors.scope.message}</p>
                )}
              </div>
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  Tipo<span className="text-red-500">*</span>
                </Label>
                <select
                  {...register("type")}
                  className="w-full h-12 border rounded-lg border-[#E6E6E8] px-2"
                >
                  <option disabled value="">
                    Selecione Tipo
                  </option>
                  <option value="1">Web</option>
                  <option value="2">API</option>
                  <option value="3">Cloud</option>
                  <option value="4">Infraestrutura externa</option>
                  <option value="5">Infraestrutura interna</option>
                  <option value="6">Infraestrutura mobile</option>
                  <option value="7">Infraestrutura Code Review</option>
                </select>
                {errors.type && (
                  <p className="text-red-500 text-sm">{errors.type.message}</p>
                )}
              </div>
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  É necessário credencial?
                  <span className="text-red-500">*</span>
                </Label>
                <select
                  {...register("requiresCredentials")}
                  className="w-full h-12 border rounded-lg border-[#E6E6E8] px-2"
                >
                  <option disabled value="">
                    Selecione opção
                  </option>
                  <option value="yes">Sim</option>
                  <option value="no">Não</option>
                </select>
                {errors.requiresCredentials && (
                  <p className="text-red-500 text-sm">
                    {errors.requiresCredentials.message}
                  </p>
                )}
              </div>
            </div>
            <div>
              <Label className="text-[#40414A] font-semibold text-sm">
                Alvos<span className="text-red-500">*</span>
              </Label>
              <div className="p-4 bg-white w-full rounded-xl border border-[#3088EE]">
                <div className="w-full h-fit overflow-y-auto flex flex-col gap-3">
                  <Input
                    className="md:w-2/3 m-1"
                    placeholder="Buscar ativo"
                    type="text"
                  />
                  <p className="p-2">{selectedCount} selecionados</p>
                  <div className="flex gap-4 flex-wrap max-h-[160px] overflow-y-auto">
                    {[...Array(30)].map((_, index) => (
                      <div
                        key={index}
                        className="w-[230px] p-2 flex gap-2 items-center justify-center"
                      >
                        <input
                          type="checkbox"
                          {...register2(`ativos.${index}` as const)}
                          id={`${index}`}
                          onClick={() => setLoadingButtons(!loadingButtons)}
                          className="peer h-4 w-4 border border-gray-300 rounded-md text-blue-600 focus:ring-blue-500"
                        />
                        <Label
                          htmlFor={`${index}`}
                          className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                        >
                          someone@example.com
                        </Label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
            <div className="flex flex-col md:flex-row w-full gap-4 justify-end mt-10">
              <Button
                type="submit"
                className="border-none text-white bg-[#3088EE] px-8 py-2 rounded-lg w-full md:w-fit"
              >
                Próximo
              </Button>
            </div>
          </form>
        ) : (
          <form
            onSubmit={handleSubmit2(onSubmit2)}
            className="flex flex-col gap-4"
          >
            <div>
              <Label className="text-[#40414A] font-semibold text-sm">
                Preocupações específicas<span className="text-red-500">*</span>
              </Label>
              <Textarea
                placeholder="Insira suas preocupações específicas aqui"
                className="border-[#D8D9E0] border-[2px]"
                {...register2("specificCares")}
              />
              {errors2.specificCares && (
                <p className="text-red-500 text-sm">
                  {errors2.specificCares.message}
                </p>
              )}
            </div>
            <div>
              <Label className="text-[#40414A] font-semibold text-sm">
                Exclusão e restrição de escopo
                <span className="text-red-500">*</span>
              </Label>
              <Textarea
                placeholder="Insira sua exclusão e restrição de escopo aqui"
                className="border-[#D8D9E0] border-[2px]"
                {...register2("scopeRestriction")}
              />
              {errors2.scopeRestriction && (
                <p className="text-red-500 text-sm">
                  {errors2.scopeRestriction.message}
                </p>
              )}
            </div>
            <div className="flex flex-col md:flex-row w-full gap-4">
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  É necessário VPN?<span className="text-red-500">*</span>
                </Label>
                <select
                  {...register2("isVpn")}
                  className="w-full h-12 border rounded-lg border-[#E6E6E8] px-2"
                >
                  <option disabled value="">
                    Selecione opção
                  </option>
                  <option value="true">Sim</option>
                  <option value="false">Não</option>
                </select>
                {errors2.isVpn && (
                  <p className="text-red-500 text-sm">
                    {errors2.isVpn.message}
                  </p>
                )}
              </div>
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  Ambientes
                  <span className="text-red-500">*</span>
                </Label>
                <select
                  {...register2("environment")}
                  className="w-full h-12 border rounded-lg border-[#E6E6E8] px-2"
                >
                  <option disabled value="">
                    Selecione opção
                  </option>
                  <option value="1">Produtivo</option>
                  <option value="2">Homologação</option>
                </select>
                {errors2.environment && (
                  <p className="text-red-500 text-sm">
                    {errors2.environment.message}
                  </p>
                )}
              </div>
            </div>
            <div className="flex flex-col md:flex-row w-full gap-4">
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  Controles implementados<span className="text-red-500">*</span>
                </Label>
                <select
                  {...register2("implementedControls")}
                  className="w-full h-12 border rounded-lg border-[#E6E6E8] px-2"
                >
                  <option disabled value="">
                    Selecione Tipo
                  </option>
                  <option value="waf">WAF</option>
                  <option value="rate limit">Rate Limit</option>
                  <option value="cdn">CDN</option>
                  <option value="Outros">Outros</option>
                </select>
                {errors2.implementedControls && (
                  <p className="text-red-500 text-sm">
                    {errors2.implementedControls.message}
                  </p>
                )}
              </div>
              <div className="w-full">
                <Label className="text-[#40414A] font-semibold text-sm">
                  Outros
                </Label>
                <Input
                  className="border-[#D8D9E0] border-[1px] h-[46px]"
                  type="text"
                  placeholder="Digite aqui"
                  {...register2("others")}
                />
              </div>
            </div>
            <div className="flex flex-col md:flex-row w-full gap-4 justify-between mt-10">
              <Button
                onClick={() => setTab1(true)}
                variant={"outline"}
                className="text-[#3088EE] border-[#3088EE] px-8 py-2 rounded-lg w-full md:w-fit"
              >
                Voltar
              </Button>
              <Button
                disabled={loading}
                className="border-none text-white bg-[#3088EE] px-8 py-2 rounded-lg w-full md:w-fit"
              >
                {loading ? "Enviando..." : "Enviar"}
              </Button>
            </div>
          </form>
        )}
      </div>
      <ModalNotSent
        open={openNotSent}
        setOpen={() => setOpenNotSent(!openNotSent)}
      />
      <ModalSent open={openSent} setOpen={() => setOpenSent(!openSent)} />
    </section>
  );
};

export default RegisterForm;
